name: Telegram Notifications

on:
  push:
  pull_request:
    types: [opened, closed, reopened]
  release:
    types: [published]
  create:
  delete:

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare notification message
        id: prepare_message
        run: |
          EVENT_TYPE="${{ github.event_name }}"
          MESSAGE=""
          REPO_NAME="${{ github.repository }}"
          REPO_URL="https://github.com/${{ github.repository }}"
          ACTOR="${{ github.actor }}"
          ACTOR_URL="https://github.com/${{ github.actor }}"
          REF_NAME="${{ github.ref_name }}"
          
          # PUSH event
          if [ "$EVENT_TYPE" = "push" ]; then
            if [ -z "${{ github.event.head_commit.id }}" ]; then
              BRANCH_REF=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
              MESSAGE="üóëÔ∏è Branch deleted: $BRANCH_REF"
            else
              COMMIT_MSG="${{ github.event.head_commit.message }}"
              COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.event.head_commit.id }}"
              MESSAGE="üìù New commit in $REPO_NAME:$REF_NAME\n\n"
              MESSAGE+="üí¨ $COMMIT_MSG\n"
              MESSAGE+="üë§ by $ACTOR\n"
              MESSAGE+="üîó $COMMIT_URL"
            fi
          
          # CREATE event  
          elif [ "$EVENT_TYPE" = "create" ]; then
            if [ "${{ github.ref_type }}" = "branch" ]; then
              MESSAGE="üåø Created branch: $REF_NAME\n"
              MESSAGE+="üë§ by $ACTOR"
            elif [ "${{ github.ref_type }}" = "tag" ]; then
              MESSAGE="üè∑Ô∏è Created tag: $REF_NAME\n"
              MESSAGE+="üë§ by $ACTOR"
            fi
          
          # DELETE event
          elif [ "$EVENT_TYPE" = "delete" ]; then
            if [ "${{ github.ref_type }}" = "branch" ]; then
              MESSAGE="üóëÔ∏è Deleted branch: $REF_NAME\n"
              MESSAGE+="üë§ by $ACTOR"
            elif [ "${{ github.ref_type }}" = "tag" ]; then
              MESSAGE="üóëÔ∏è Deleted tag: $REF_NAME\n"
              MESSAGE+="üë§ by $ACTOR"
            fi
          
          # PULL_REQUEST event
          elif [ "$EVENT_TYPE" = "pull_request" ]; then
            ACTION="${{ github.event.action }}"
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_AUTHOR="${{ github.event.pull_request.user.login }}"
            PR_URL="${{ github.event.pull_request.html_url }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            
            if [ "$ACTION" = "opened" ]; then
              MESSAGE="üéØ New Pull Request #$PR_NUMBER\n"
              MESSAGE+="üìå $PR_TITLE\n"
              MESSAGE+="üë§ by $PR_AUTHOR\n"
              MESSAGE+="üîó $PR_URL"
            elif [ "$ACTION" = "closed" ]; then
              if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
                MESSAGE="‚úÖ PR Merged #$PR_NUMBER\n"
                MESSAGE+="üìå $PR_TITLE\n"
                MESSAGE+="üë§ by $PR_AUTHOR"
              else
                MESSAGE="‚ùå PR Closed #$PR_NUMBER\n"
                MESSAGE+="üìå $PR_TITLE\n"
                MESSAGE+="üë§ by $PR_AUTHOR"
              fi
            elif [ "$ACTION" = "reopened" ]; then
              MESSAGE="üîÑ PR Reopened #$PR_NUMBER\n"
              MESSAGE+="üìå $PR_TITLE\n"
              MESSAGE+="üë§ by $PR_AUTHOR\n"
              MESSAGE+="üîó $PR_URL"
            fi
          
          # RELEASE event
          elif [ "$EVENT_TYPE" = "release" ]; then
            RELEASE_NAME="${{ github.event.release.name }}"
            TAG_NAME="${{ github.event.release.tag_name }}"
            RELEASE_URL="${{ github.event.release.html_url }}"
            MESSAGE="üéâ New Release\n"
            MESSAGE+="üì¶ $RELEASE_NAME v$TAG_NAME\n"
            MESSAGE+="üë§ by $ACTOR\n"
            MESSAGE+="üîó $RELEASE_URL"
          
          else
            MESSAGE="üìã Event: $EVENT_TYPE\n"
            MESSAGE+="üë§ by $ACTOR"
          fi
          
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          echo "Debug: Message prepared: $MESSAGE"

      - name: Install jq for URL encoding
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Send Telegram notification via API
        run: |
          # URL-encode —Å–æ–æ–±—â–µ–Ω–∏–µ
          MESSAGE="${{ steps.prepare_message.outputs.message }}"
          ENCODED_MESSAGE=$(echo -n "$MESSAGE" | jq -s -R -r @uri)
          
          echo "Debug: Encoded message: $ENCODED_MESSAGE"
          
          # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º—É
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "message_thread_id=6" \
            -d "text=$ENCODED_MESSAGE" \
            -d "parse_mode=MarkdownV2")
          
          # –ò–∑–≤–ª–µ–∫–∞–µ–º HTTP –∫–æ–¥ –∏ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
          HTTP_CODE=$(echo "$RESPONSE" | grep -o 'HTTP_CODE:[0-9]*' | cut -d: -f2)
          BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')
          
          echo "Debug: HTTP Code: $HTTP_CODE"
          echo "Debug: Response: $BODY"
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Message sent successfully to topic 6"
          else
            echo "‚ùå Failed to send message. Response: $BODY"
            exit 1
          fi
