name: Telegram Notifications

on:
  push:
  pull_request:
    types: [opened, closed, reopened]
  release:
    types: [published]
  create:
  delete:

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare notification message
        id: prepare_message
        run: |
          EVENT_TYPE="${{ github.event_name }}"
          MESSAGE=""
          REPO_NAME="${{ github.repository }}"
          REPO_URL="https://github.com/${{ github.repository }}"
          ACTOR="${{ github.actor }}"
          REF_NAME="${{ github.ref_name }}"
          
          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2
          escape_markdown() {
            echo "$1" | sed -e 's/[_*\[\]()~`>#+\-=|{}\.!]/\\&/g' -e 's/-/\\-/g'
          }
          
          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è MarkdownV2 —Å—Å—ã–ª–æ–∫ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
          create_link() {
            local text=$(escape_markdown "$1")
            local url="$2"
            echo "[$text]($url)"
          }
          
          ESCAPED_REPO=$(escape_markdown "$REPO_NAME")
          ESCAPED_REF=$(escape_markdown "$REF_NAME")
          ESCAPED_ACTOR=$(escape_markdown "$ACTOR")
          
          # PUSH event
          if [ "$EVENT_TYPE" = "push" ]; then
            if [ -z "${{ github.event.head_commit.id }}" ]; then
              BRANCH_REF=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
              ESCAPED_BRANCH=$(escape_markdown "$BRANCH_REF")
              MESSAGE="üóëÔ∏è Branch deleted: $ESCAPED_BRANCH"
            else
              COMMIT_MSG=$(escape_markdown "${{ github.event.head_commit.message }}")
              COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.event.head_commit.id }}"
              VIEW_COMMIT_LINK=$(create_link "View commit" "$COMMIT_URL")
              
              MESSAGE="üìù New commit in *$ESCAPED_REPO*:*$ESCAPED_REF*%0A%0A"
              MESSAGE+="üí¨ $COMMIT_MSG%0A"
              MESSAGE+="üë§ by $ESCAPED_ACTOR%0A"
              MESSAGE+="üîó $VIEW_COMMIT_LINK"
            fi
          
          # CREATE event  
          elif [ "$EVENT_TYPE" = "create" ]; then
            if [ "${{ github.ref_type }}" = "branch" ]; then
              MESSAGE="üåø Created branch: *$ESCAPED_REF*%0A"
              MESSAGE+="üë§ by $ESCAPED_ACTOR"
            elif [ "${{ github.ref_type }}" = "tag" ]; then
              MESSAGE="üè∑Ô∏è Created tag: *$ESCAPED_REF*%0A"
              MESSAGE+="üë§ by $ESCAPED_ACTOR"
            fi
          
          # DELETE event
          elif [ "$EVENT_TYPE" = "delete" ]; then
            if [ "${{ github.ref_type }}" = "branch" ]; then
              MESSAGE="üóëÔ∏è Deleted branch: *$ESCAPED_REF*%0A"
              MESSAGE+="üë§ by $ESCAPED_ACTOR"
            elif [ "${{ github.ref_type }}" = "tag" ]; then
              MESSAGE="üóëÔ∏è Deleted tag: *$ESCAPED_REF*%0A"
              MESSAGE+="üë§ by $ESCAPED_ACTOR"
            fi
          
          # PULL_REQUEST event
          elif [ "$EVENT_TYPE" = "pull_request" ]; then
            ACTION="${{ github.event.action }}"
            PR_TITLE=$(escape_markdown "${{ github.event.pull_request.title }}")
            PR_AUTHOR=$(escape_markdown "${{ github.event.pull_request.user.login }}")
            PR_URL="${{ github.event.pull_request.html_url }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            
            VIEW_PR_LINK=$(create_link "View PR" "$PR_URL")
            
            if [ "$ACTION" = "opened" ]; then
              MESSAGE="üéØ New Pull Request #$PR_NUMBER%0A"
              MESSAGE+="üìå *$PR_TITLE*%0A"
              MESSAGE+="üë§ by $PR_AUTHOR%0A"
              MESSAGE+="üîó $VIEW_PR_LINK"
            elif [ "$ACTION" = "closed" ]; then
              if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
                MESSAGE="‚úÖ PR Merged #$PR_NUMBER%0A"
                MESSAGE+="üìå *$PR_TITLE*%0A"
                MESSAGE+="üë§ by $PR_AUTHOR"
              else
                MESSAGE="‚ùå PR Closed #$PR_NUMBER%0A"
                MESSAGE+="üìå *$PR_TITLE*%0A"
                MESSAGE+="üë§ by $PR_AUTHOR"
              fi
            elif [ "$ACTION" = "reopened" ]; then
              MESSAGE="üîÑ PR Reopened #$PR_NUMBER%0A"
              MESSAGE+="üìå *$PR_TITLE*%0A"
              MESSAGE+="üë§ by $PR_AUTHOR%0A"
              MESSAGE+="üîó $VIEW_PR_LINK"
            fi
          
          # RELEASE event
          elif [ "$EVENT_TYPE" = "release" ]; then
            RELEASE_NAME=$(escape_markdown "${{ github.event.release.name }}")
            TAG_NAME=$(escape_markdown "${{ github.event.release.tag_name }}")
            RELEASE_URL="${{ github.event.release.html_url }}"
            VIEW_RELEASE_LINK=$(create_link "View Release" "$RELEASE_URL")
            
            MESSAGE="üéâ New Release%0A"
            MESSAGE+="üì¶ *$RELEASE_NAME* v$TAG_NAME%0A"
            MESSAGE+="üë§ by $ESCAPED_ACTOR%0A"
            MESSAGE+="üîó $VIEW_RELEASE_LINK"
          
          else
            ESCAPED_EVENT=$(escape_markdown "$EVENT_TYPE")
            MESSAGE="üìã Event: $ESCAPED_EVENT%0A"
            MESSAGE+="üë§ by $ESCAPED_ACTOR"
          fi
          
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          echo "Debug: Message prepared: $MESSAGE"

      - name: Install jq for URL encoding
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Send Telegram notification via API
        run: |
          MESSAGE="${{ steps.prepare_message.outputs.message }}"
          
          echo "Debug: Final message: $MESSAGE"
          
          # –î–µ–∫–æ–¥–∏—Ä—É–µ–º %0A –æ–±—Ä–∞—Ç–Ω–æ –≤ \n –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ª–æ–≥–∞—Ö
          DECODED_MESSAGE=$(echo "$MESSAGE" | sed 's/%0A/\\n/g')
          echo "Debug: Decoded for logs: $DECODED_MESSAGE"
          
          # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º—É —Å MarkdownV2
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "message_thread_id=6" \
            -d "text=$MESSAGE" \
            -d "parse_mode=MarkdownV2")
          
          # –ò–∑–≤–ª–µ–∫–∞–µ–º HTTP –∫–æ–¥ –∏ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
          HTTP_CODE=$(echo "$RESPONSE" | grep -o 'HTTP_CODE:[0-9]*' | cut -d: -f2)
          BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')
          
          echo "Debug: HTTP Code: $HTTP_CODE"
          echo "Debug: Response: $BODY"
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Message sent successfully to topic 6"
          else
            echo "‚ùå Failed to send with MarkdownV2, trying HTML format..."
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HTML
            HTML_MESSAGE=$(echo "$MESSAGE" | sed \
              -e 's/\\//g' \
              -e 's/\*\([^*]*\)\*/<b>\1<\/b>/g' \
              -e 's/\[\([^]]*\)](\([^)]*\))/<a href="\2">\1<\/a>/g' \
              -e 's/%0A/<br>/g')
            
            ENCODED_HTML=$(echo -n "$HTML_MESSAGE" | jq -s -R -r @uri)
            
            curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
              "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
              -d "message_thread_id=6" \
              -d "text=$ENCODED_HTML" \
              -d "parse_mode=HTML" \
              -d "disable_web_page_preview=true"
          fi
