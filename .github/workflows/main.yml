name: Telegram Notifications

on:
  push:
  pull_request:
    types: [opened, closed, reopened]
  release:
    types: [published]
  create:
  delete:

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare notification message
        id: prepare_message
        run: |
          EVENT_TYPE="${{ github.event_name }}"
          MESSAGE=""
          REPO_NAME="${{ github.repository }}"
          REPO_URL="https://github.com/${{ github.repository }}"
          ACTOR="${{ github.actor }}"
          REF_NAME="${{ github.ref_name }}"
          
          # PUSH event
          if [ "$EVENT_TYPE" = "push" ]; then
            if [ -z "${{ github.event.head_commit.id }}" ]; then
              BRANCH_REF=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
              MESSAGE="üóëÔ∏è <b>Branch deleted:</b> <code>$BRANCH_REF</code>"
            else
              COMMIT_MSG="${{ github.event.head_commit.message }}"
              COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.event.head_commit.id }}"
              MESSAGE="üìù <b>New commit</b> in <b>$REPO_NAME</b>:<b>$REF_NAME</b>\n\n"
              MESSAGE+="üí¨ <i>$COMMIT_MSG</i>\n"
              MESSAGE+="üë§ by <b>$ACTOR</b>\n"
              MESSAGE+="üîó <a href=\"$COMMIT_URL\">View commit</a>"
            fi
          
          # CREATE event  
          elif [ "$EVENT_TYPE" = "create" ]; then
            if [ "${{ github.ref_type }}" = "branch" ]; then
              MESSAGE="üåø <b>Created branch:</b> <code>$REF_NAME</code>\n"
              MESSAGE+="üë§ by <b>$ACTOR</b>"
            elif [ "${{ github.ref_type }}" = "tag" ]; then
              MESSAGE="üè∑Ô∏è <b>Created tag:</b> <code>$REF_NAME</code>\n"
              MESSAGE+="üë§ by <b>$ACTOR</b>"
            fi
          
          # DELETE event
          elif [ "$EVENT_TYPE" = "delete" ]; then
            if [ "${{ github.ref_type }}" = "branch" ]; then
              MESSAGE="üóëÔ∏è <b>Deleted branch:</b> <code>$REF_NAME</code>\n"
              MESSAGE+="üë§ by <b>$ACTOR</b>"
            elif [ "${{ github.ref_type }}" = "tag" ]; then
              MESSAGE="üóëÔ∏è <b>Deleted tag:</b> <code>$REF_NAME</code>\n"
              MESSAGE+="üë§ by <b>$ACTOR</b>"
            fi
          
          # PULL_REQUEST event
          elif [ "$EVENT_TYPE" = "pull_request" ]; then
            ACTION="${{ github.event.action }}"
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_AUTHOR="${{ github.event.pull_request.user.login }}"
            PR_URL="${{ github.event.pull_request.html_url }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            
            if [ "$ACTION" = "opened" ]; then
              MESSAGE="üéØ <b>New Pull Request</b> #$PR_NUMBER\n"
              MESSAGE+="üìå <b>$PR_TITLE</b>\n"
              MESSAGE+="üë§ by <b>$PR_AUTHOR</b>\n"
              MESSAGE+="üîó <a href=\"$PR_URL\">View PR</a>"
            elif [ "$ACTION" = "closed" ]; then
              if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
                MESSAGE="‚úÖ <b>PR Merged</b> #$PR_NUMBER\n"
                MESSAGE+="üìå <b>$PR_TITLE</b>\n"
                MESSAGE+="üë§ by <b>$PR_AUTHOR</b>"
              else
                MESSAGE="‚ùå <b>PR Closed</b> #$PR_NUMBER\n"
                MESSAGE+="üìå <b>$PR_TITLE</b>\n"
                MESSAGE+="üë§ by <b>$PR_AUTHOR</b>"
              fi
            elif [ "$ACTION" = "reopened" ]; then
              MESSAGE="üîÑ <b>PR Reopened</b> #$PR_NUMBER\n"
              MESSAGE+="üìå <b>$PR_TITLE</b>\n"
              MESSAGE+="üë§ by <b>$PR_AUTHOR</b>\n"
              MESSAGE+="üîó <a href=\"$PR_URL\">View PR</a>"
            fi
          
          # RELEASE event
          elif [ "$EVENT_TYPE" = "release" ]; then
            RELEASE_NAME="${{ github.event.release.name }}"
            TAG_NAME="${{ github.event.release.tag_name }}"
            RELEASE_URL="${{ github.event.release.html_url }}"
            MESSAGE="üéâ <b>New Release</b>\n"
            MESSAGE+="üì¶ <b>$RELEASE_NAME</b> v$TAG_NAME\n"
            MESSAGE+="üë§ by <b>$ACTOR</b>\n"
            MESSAGE+="üîó <a href=\"$RELEASE_URL\">View Release</a>"
          
          else
            MESSAGE="üìã <b>Event:</b> $EVENT_TYPE\n"
            MESSAGE+="üë§ by <b>$ACTOR</b>"
          fi
          
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          echo "Debug: Message prepared: $MESSAGE"

      - name: Install jq for URL encoding
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Send Telegram notification via API
        run: |
          MESSAGE="${{ steps.prepare_message.outputs.message }}"
          
          echo "Debug: Final message: $MESSAGE"
          
          # –ó–∞–º–µ–Ω—è–µ–º \n –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
          MESSAGE_WITH_NEWLINES=$(echo "$MESSAGE" | sed 's/\\n/\n/g')
          
          # URL-encode —Å–æ–æ–±—â–µ–Ω–∏–µ
          ENCODED_MESSAGE=$(echo -n "$MESSAGE_WITH_NEWLINES" | jq -s -R -r @uri)
          
          echo "Debug: Encoded message: $ENCODED_MESSAGE"
          
          # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º—É —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "message_thread_id=6" \
            -d "text=$ENCODED_MESSAGE" \
            -d "parse_mode=HTML" \
            -d "disable_web_page_preview=true")
          
          # –ò–∑–≤–ª–µ–∫–∞–µ–º HTTP –∫–æ–¥ –∏ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
          HTTP_CODE=$(echo "$RESPONSE" | grep -o 'HTTP_CODE:[0-9]*' | cut -d: -f2)
          BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')
          
          echo "Debug: HTTP Code: $HTTP_CODE"
          echo "Debug: Response: $BODY"
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Message sent successfully to topic 6"
          else
            echo "‚ùå Failed to send with HTML, trying without formatting..."
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ HTML
            SIMPLE_MESSAGE=$(echo "$MESSAGE_WITH_NEWLINES" | sed -e 's/<[^>]*>//g')
            ENCODED_SIMPLE=$(echo -n "$SIMPLE_MESSAGE" | jq -s -R -r @uri)
            
            curl -s -X POST \
              "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
              -d "message_thread_id=6" \
              -d "text=$ENCODED_SIMPLE"
          fi
