name: Telegram Notifications

on:
  push:
  pull_request:
    types: [opened, closed, reopened]
  release:
    types: [published]
  create:
  delete:

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare notification message
        id: prepare_message
        run: |
          EVENT_TYPE="${{ github.event_name }}"
          MESSAGE=""
          REPO_NAME="${{ github.repository }}"
          REPO_URL="https://github.com/${{ github.repository }}"
          ACTOR="${{ github.actor }}"
          ACTOR_URL="https://github.com/${{ github.actor }}"
          REF_NAME="${{ github.ref_name }}"
          
          # PUSH event
          if [ "$EVENT_TYPE" = "push" ]; then
            if [ -z "${{ github.event.head_commit.id }}" ]; then
              BRANCH_REF=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
              MESSAGE="🗑️ <b>Branch deleted:</b> <code>$BRANCH_REF</code>"
            else
              COMMIT_MSG="${{ github.event.head_commit.message }}"
              COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.event.head_commit.id }}"
              MESSAGE="📝 <b>New commit</b> in <a href=\"$REPO_URL\">$REPO_NAME</a>:<b>$REF_NAME</b>\n\n"
              MESSAGE+="💬 <i>$COMMIT_MSG</i>\n"
              MESSAGE+="👤 by <a href=\"$ACTOR_URL\">$ACTOR</a>\n"
              MESSAGE+="🔗 <a href=\"$COMMIT_URL\">View commit</a>"
            fi
          
          # CREATE event  
          elif [ "$EVENT_TYPE" = "create" ]; then
            if [ "${{ github.ref_type }}" = "branch" ]; then
              MESSAGE="🌿 <b>Created branch:</b> <code>$REF_NAME</code>\n"
              MESSAGE+="👤 by <a href=\"$ACTOR_URL\">$ACTOR</a>"
            elif [ "${{ github.ref_type }}" = "tag" ]; then
              MESSAGE="🏷️ <b>Created tag:</b> <code>$REF_NAME</code>\n"
              MESSAGE+="👤 by <a href=\"$ACTOR_URL\">$ACTOR</a>"
            fi
          
          # DELETE event
          elif [ "$EVENT_TYPE" = "delete" ]; then
            if [ "${{ github.ref_type }}" = "branch" ]; then
              MESSAGE="🗑️ <b>Deleted branch:</b> <code>$REF_NAME</code>\n"
              MESSAGE+="👤 by <a href=\"$ACTOR_URL\">$ACTOR</a>"
            elif [ "${{ github.ref_type }}" = "tag" ]; then
              MESSAGE="🗑️ <b>Deleted tag:</b> <code>$REF_NAME</code>\n"
              MESSAGE+="👤 by <a href=\"$ACTOR_URL\">$ACTOR</a>"
            fi
          
          # PULL_REQUEST event
          elif [ "$EVENT_TYPE" = "pull_request" ]; then
            ACTION="${{ github.event.action }}"
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_AUTHOR="${{ github.event.pull_request.user.login }}"
            PR_AUTHOR_URL="https://github.com/${{ github.event.pull_request.user.login }}"
            PR_URL="${{ github.event.pull_request.html_url }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            
            if [ "$ACTION" = "opened" ]; then
              MESSAGE="🎯 <b>New Pull Request</b> #$PR_NUMBER\n"
              MESSAGE+="📌 <b>$PR_TITLE</b>\n"
              MESSAGE+="👤 by <a href=\"$PR_AUTHOR_URL\">$PR_AUTHOR</a>\n"
              MESSAGE+="🔗 <a href=\"$PR_URL\">View PR</a>"
            elif [ "$ACTION" = "closed" ]; then
              if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
                MESSAGE="✅ <b>PR Merged</b> #$PR_NUMBER\n"
                MESSAGE+="📌 <b>$PR_TITLE</b>\n"
                MESSAGE+="👤 by <a href=\"$PR_AUTHOR_URL\">$PR_AUTHOR</a>"
              else
                MESSAGE="❌ <b>PR Closed</b> #$PR_NUMBER\n"
                MESSAGE+="📌 <b>$PR_TITLE</b>\n"
                MESSAGE+="👤 by <a href=\"$PR_AUTHOR_URL\">$PR_AUTHOR</a>"
              fi
            elif [ "$ACTION" = "reopened" ]; then
              MESSAGE="🔄 <b>PR Reopened</b> #$PR_NUMBER\n"
              MESSAGE+="📌 <b>$PR_TITLE</b>\n"
              MESSAGE+="👤 by <a href=\"$PR_AUTHOR_URL\">$PR_AUTHOR</a>\n"
              MESSAGE+="🔗 <a href=\"$PR_URL\">View PR</a>"
            fi
          
          # RELEASE event
          elif [ "$EVENT_TYPE" = "release" ]; then
            RELEASE_NAME="${{ github.event.release.name }}"
            TAG_NAME="${{ github.event.release.tag_name }}"
            RELEASE_URL="${{ github.event.release.html_url }}"
            MESSAGE="🎉 <b>New Release</b>\n"
            MESSAGE+="📦 <b>$RELEASE_NAME</b> v$TAG_NAME\n"
            MESSAGE+="👤 by <a href=\"$ACTOR_URL\">$ACTOR</a>\n"
            MESSAGE+="🔗 <a href=\"$RELEASE_URL\">View Release</a>"
          
          else
            MESSAGE="📋 <b>Event:</b> $EVENT_TYPE\n"
            MESSAGE+="👤 by <a href=\"$ACTOR_URL\">$ACTOR</a>"
          fi
          
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT

      - name: Send Telegram notification via API
        run: |
          # Отправка сообщения в тему с HTML форматированием
          curl -s -X POST \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "message_thread_id=6" \
            -d "text=${{ steps.prepare_message.outputs.message }}" \
            -d "parse_mode=HTML" \
            -d "disable_web_page_preview=true"
          
          # Проверка статуса отправки
          if [ $? -eq 0 ]; then
            echo "Message sent successfully to topic 6"
          else
            echo "Failed to send message"
            exit 1
          fi
